//@version=5
strategy("Bollinger Bands & MACD Strategy", overlay=true)

// Bollinger Bands Calculation
length = 20
src = close
mult = 2.0
basis = ta.sma(src, length)
sma20 = ta.sma(close,20)
sma50 = ta.sma(close,50)
dev = mult * ta.stdev(src, length)
upperBB = basis + dev
lowerBB = basis - dev
b_percent = (src - lowerBB) / (upperBB - lowerBB)

// Bollinger Bandwidth Calculation
bb_width = ((upperBB - lowerBB) / basis) * 100

adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="DI Length")
dirmov(len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
    [adx,plus,minus]
[adx,plus,minus] = adx(dilen, adxlen)


// MACD Calculation
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)
postitve_diff_percent = ((macdLine - signalLine ) / math.abs(signalLine)) * 100
negative_diff_percent = ((signalLine - macdLine ) / math.abs(signalLine)) * 100

// Entry Condition
longCondition = sma20 > sma50 and b_percent > 0.7 and adx > 20  and macdLine > signalLine and postitve_diff_percent > 4
if (longCondition)
    strategy.entry("Long", strategy.long)

// Exit Condition
exitCondition = sma20 < sma50
if (exitCondition)
    strategy.close("Long")




// âœ… Plot Bollinger Bandwidth in a Separate Window
// plot(bb_width, color=color.purple, title="BB Width")
