//@version=6
indicator("ALL STRATEGIES", overlay=false)

enum STRATEGY
    DMI_STOCHASTIC = "DMI + STOCHASTIC"
    EMA_CCI = "EMA_CCI"
    MACD_CMF = "MACD_CMF"
    BB_DMI_MACD = "BB_DMI_MACD"

enum ACTION 
    BUY = "BUY"
    SELL = "SELL"
    NONE = "NONE"

type stock
    string name
    float closePrice 
    float closePrev
    float highPrice
    float lowPrice
    float specVolume
    bool barstateLast
    array<STRATEGY> strategies

close_high_low_price_of_stock(name) => 
    [closePrice, highPrice, lowPrice, specVolume, barstateLast , closePrev] = request.security(name, "D", [close, high, low, volume, barstate.islast , close[1]])
    stock.new(name = name, closePrice = closePrice, highPrice = highPrice, lowPrice = lowPrice, specVolume = specVolume, barstateLast = barstateLast, closePrev = closePrev)

/// ################ DMI + STOCHASTIC STRATEGY #########################

DMI_STOCHASTIC(stock, last_buy_price) => 

    // This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
    lensig = input.int(20, title="ADX Smoothing", minval=1)
    len = input.int(20, minval=1, title="DI Length")
    stochLength = input(20, title="Stochastic Length")
    smoothK = input(3, title="Stochastic %K Smoothing")
    smoothD = input(3, title="Stochastic %D Smoothing")
    adxlen = input(14, title="ADX Smoothing")
    dilen = input(14, title="DI Length")
 
    up = ta.change(stock.highPrice)
    down = -ta.change(stock.lowPrice)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    truerange = ta.rma(ta.tr, dilen)
    plus = fixnan(100 * ta.rma(plusDM, dilen) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, dilen) / truerange)
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
         


    // Calculate Stochastic Oscillator
    k = ta.sma(ta.stoch(stock.closePrice, stock.highPrice, stock.lowPrice, stochLength), smoothK)
    d = ta.sma(k, smoothD)
    sma = ta.sma(stock.closePrice, 50)
    slope = sma - sma[5]
    trendDirection = slope > 0
    tr1 = stock.highPrice - stock.lowPrice
    tr2 = math.abs(stock.highPrice - stock.closePrev)
    tr3 = math.abs(stock.lowPrice - stock.closePrev)
    trueRange = math.max(math.max(tr1, tr2), tr3)
    atr = ta.rma(trueRange, 14)
    stopLoss = last_buy_price - ( atr*3 ) // 10% stop-loss

    // ✅ Take-Profit Calculation (20% Above Entry)
    takeProfit = last_buy_price * 1.3  

    // Entry Condition: +DI is at least 4% greater than -DI AND Stochastic is above 50
    longCondition = (plus > minus * 1.04)  and k > 50 and trendDirection

    // Exit Condition: +DI crosses below -DI OR Stochastic falls below 30
    exitCondition = ((plus < minus * 1.04) and k < 20 ) or stock.closePrice >= takeProfit or stock.closePrice <= stopLoss

    ACTION RES = ACTION.NONE
    var last_buy_price_modified = float(na)
    // Execute trade
    if (longCondition and na (last_buy_price))
        last_buy_price_modified := stock.closePrice
        RES := ACTION.BUY

    // Close trade when exit condition met
    if (exitCondition) and not na (last_buy_price)
        last_buy_price_modified := float(na)
        RES := ACTION.SELL

    [RES, last_buy_price_modified]





// ###################### EMA + CCI STRATEGY #####################


EMI_CCI_STRATEGY(STOCK , last_buy_price) => 
    // Input for EMAs
    // This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © bairapraveen8



// Input for EMAs
    ema13 = ta.ema(STOCK.closePrice, 13)
    ema26 = ta.ema(STOCK.closePrice, 26)
    ema52 = ta.ema(STOCK.closePrice, 52)

    // Input for CCI
    cciLength = input(25, title="CCI Length")
    cci = ta.cci(STOCK.closePrice, cciLength)
    tr1 = STOCK.highPrice - STOCK.lowPrice
    tr2 = math.abs(STOCK.highPrice - STOCK.closePrev)
    tr3 = math.abs(STOCK.lowPrice - STOCK.closePrev)
    trueRange = math.max(math.max(tr1, tr2), tr3)
    atr = ta.rma(trueRange, 14)
    stopLoss =  last_buy_price - ( atr*4 ) // 10% stop-loss

    // ✅ Take-Profit Calculation (20% Above Entry)
    takeProfit =  last_buy_price * 1.5 

    // Entry Condition 
    longCondition = ema13 >= ema26 and ema13 >= ema52 and ema26 >= ema52 and cci > 80

    // Exit Condition
    exitCondition = (( ta.crossunder(ema13,ema26) and ema13 < ema26 and ema13 <= ema52) and cci < 20) or (STOCK.closePrice <= stopLoss) or (STOCK.closePrice >= takeProfit)

    ACTION RES = ACTION.NONE
    var last_buy_price_modified = float(na)

    
    // Execute trade
    if (longCondition and na (last_buy_price))
        last_buy_price_modified := STOCK.closePrice
        RES := ACTION.BUY

    if (exitCondition) and not na (last_buy_price)
        last_buy_price_modified := float(na)
        RES := ACTION.SELL

    [RES, last_buy_price_modified]



/// #################### MACD + CMF STRATEGY ########################

MACD_CMF_STRATEGY(STOCK , last_buy_price) => 

    // This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

    sma10 = ta.sma(STOCK.closePrice,10)

    sma50 = ta.sma(STOCK.closePrice,50)
    sma20 = ta.sma(STOCK.closePrice,20)
    slope = sma50 - sma50[5]
    trendDirection = slope > 0


    // Calculate CMF (Chaikin Money Flow)
    var cumVol = 0.
    cumVol += nz(STOCK.specVolume)
    if STOCK.barstateLast and cumVol == 0
        runtime.error("No volume is provided by the data vendor.")
    length = input.int(20, minval=1)
    ad = STOCK.closePrice==STOCK.highPrice and STOCK.closePrice==STOCK.lowPrice or STOCK.highPrice==STOCK.lowPrice ? 0 : ((2*STOCK.closePrice-STOCK.lowPrice-STOCK.highPrice)/(STOCK.highPrice-STOCK.lowPrice))*STOCK.specVolume
    mf = math.sum(ad, length) / math.sum(STOCK.specVolume, length)
    // plot(mf, "CMF",  color = #43A047)
    // hline(0, "Zero", color = #787B86, linestyle = hline.style_dashed)

    // Calculate MACD
    // Getting inputs
    [macd, signal, _] = ta.macd(STOCK.closePrice, 12, 26, 9)
    hist = macd - signal
    postitve_diff_percent = ((macd - signal ) / math.abs(signal)) * 100
    negative_diff_percent = ((signal - macd ) / math.abs(signal)) * 100
    tr1 = STOCK.highPrice - STOCK.lowPrice
    tr2 = math.abs(STOCK.highPrice - STOCK.closePrev)
    tr3 = math.abs(STOCK.lowPrice - STOCK.closePrev)
    trueRange = math.max(math.max(tr1, tr2), tr3)
    atr = ta.rma(trueRange, 14)
    stopLoss = last_buy_price - ( atr*4 ) // 10% stop-loss

    // ✅ Take-Profit Calculation (20% Above Entry)
    takeProfit = last_buy_price * 1.23  

    // Entry Condition: CMF > 0.05 AND MACD Line > Signal Line
    longCondition = mf > 0.05  and macd > signal and postitve_diff_percent > 4 and trendDirection

    // Exit Condition: mf < 0.05 OR MACD Line < Signal Line
    exitCondition = ta.crossunder(sma10, sma50) or (STOCK.closePrice >= takeProfit) or ( STOCK.closePrice<= stopLoss )


    ACTION RES = ACTION.NONE
    var last_buy_price_modified = float(na)

     

    // Enter trade when conditions are met
    if (longCondition and na (last_buy_price))
        last_buy_price_modified := STOCK.closePrice
        RES := ACTION.BUY
    // Exit trade when exit conditions are met
    if (exitCondition) and not na (last_buy_price)
        last_buy_price_modified := float(na)
        RES := ACTION.SELL

    [RES, last_buy_price_modified]
    



// ################# BB + DMI + MACD STRATEGY ########################

BB_DMI_MACD_STRATEGY(STOCK , last_buy_price) => 


    // Bollinger Bands Calculation
    length = 20
    src = STOCK.closePrice
    mult = 2.0
    basis = ta.sma(src, length)
    sma20 = ta.sma(STOCK.closePrice,20)
    sma50 = ta.sma(STOCK.closePrice,50)
    dev = mult * ta.stdev(src, length)
    upperBB = basis + dev
    lowerBB = basis - dev
    b_percent = (src - lowerBB) / (upperBB - lowerBB)

    // Bollinger Bandwidth Calculation
    bb_width = ((upperBB - lowerBB) / basis) * 100

    adxlen = input(14, title="ADX Smoothing")
    dilen = input(14, title="DI Length")
    up = ta.change(STOCK.highPrice)
    down = -ta.change(STOCK.lowPrice)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    truerange = ta.rma(ta.tr, dilen)
    plus = fixnan(100 * ta.rma(plusDM, dilen) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, dilen) / truerange)
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)


    // MACD Calculation
    [macdLine, signalLine, _] = ta.macd(STOCK.closePrice, 12, 26, 9)
    postitve_diff_percent = ((macdLine - signalLine ) / math.abs(signalLine)) * 100
    negative_diff_percent = ((signalLine - macdLine ) / math.abs(signalLine)) * 100
    tr1 = STOCK.highPrice - STOCK.lowPrice
    tr2 = math.abs(STOCK.highPrice - STOCK.closePrev)
    tr3 = math.abs(STOCK.lowPrice - STOCK.closePrev)
    trueRange = math.max(math.max(tr1, tr2), tr3)
    atr = ta.rma(trueRange, 14)
    stopLoss = last_buy_price - ( atr*4 ) // 10% stop-loss

    // ✅ Take-Profit Calculation (20% Above Entry)
    takeProfit = last_buy_price * 1.3  

    ACTION RES = ACTION.NONE
    var last_buy_price_modified = float(na)

    // Entry Condition
    longCondition = sma20 > sma50 and b_percent > 0.7 and adx > 20  and macdLine > signalLine and postitve_diff_percent > 4
    if (longCondition and  na (last_buy_price))
        last_buy_price_modified := STOCK.closePrice
        RES := ACTION.BUY

    // Exit Condition
    exitCondition = ta.crossunder(sma20,sma50) or (STOCK.closePrice >= takeProfit) or ( STOCK.closePrice <= stopLoss)
    if (exitCondition) and not na (last_buy_price)
        last_buy_price_modified := float(na)
        RES := ACTION.SELL

    [RES , last_buy_price_modified]




// Fetch daily closing prices for each stock
BASF = close_high_low_price_of_stock("BASF")
BASF.strategies := array.new<STRATEGY>()
BASF.strategies.push(STRATEGY.DMI_STOCHASTIC)
BASF.strategies.push(STRATEGY.EMA_CCI)
BASF.strategies.push(STRATEGY.MACD_CMF)
BASF.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BASF
var basf_last_buy_price_dmi_stochastic = float(na)
var basf_last_buy_price_ema_cci = float(na)
var basf_last_buy_price_macd_cmf = float(na)
var basf_last_buy_price_bb_dmi_macd = float(na)

if array.includes(BASF.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(BASF,basf_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY  
        basf_last_buy_price_dmi_stochastic := entryPrice
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BASF", alert.freq_once_per_bar_close)
    if RES == ACTION.SELL 
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_dmi_stochastic := entryPrice

if array.includes(BASF.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  =  EMI_CCI_STRATEGY(BASF, basf_last_buy_price_ema_cci)
    if RES == ACTION.BUY  
        
        alert("⚠️ Buy signal based on EMA_CCI for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL  
        
        alert("⚠️ Sell signal based on EMA_CCI for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_ema_cci := entryPrice

if array.includes(BASF.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  =  MACD_CMF_STRATEGY(BASF , basf_last_buy_price_macd_cmf) 
    if RES == ACTION.BUY  
        
        alert("⚠️ Buy signal based on MACD_CMF for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL  
        
        alert("⚠️ Sell signal based on MACD_CMF for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_macd_cmf := entryPrice

if array.includes(BASF.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]   =  BB_DMI_MACD_STRATEGY(BASF , basf_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY 
        
        alert("⚠️ Buy signal based on BB_DMI_MACD for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL  
        
        alert("⚠️ Sell signal based on BB_DMI_MACD for BASF", alert.freq_once_per_bar_close)
        basf_last_buy_price_bb_dmi_macd := entryPrice


ASIANPAINT = close_high_low_price_of_stock("ASIANPAINT")
ASIANPAINT.strategies := array.new<STRATEGY>()
ASIANPAINT.strategies.push(STRATEGY.DMI_STOCHASTIC)
ASIANPAINT.strategies.push(STRATEGY.EMA_CCI)
ASIANPAINT.strategies.push(STRATEGY.MACD_CMF)
ASIANPAINT.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for ASIANPAINT
var asianpaint_last_buy_price_dmi_stochastic = float(na)
var asianpaint_last_buy_price_ema_cci = float(na)
var asianpaint_last_buy_price_macd_cmf = float(na)
var asianpaint_last_buy_price_bb_dmi_macd = float(na)

if array.includes(ASIANPAINT.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(ASIANPAINT, asianpaint_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY  
        asianpaint_last_buy_price_dmi_stochastic := entryPrice
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ASIANPAINT", alert.freq_once_per_bar_close)
    if RES == ACTION.SELL 
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_dmi_stochastic := entryPrice

if array.includes(ASIANPAINT.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(ASIANPAINT, asianpaint_last_buy_price_ema_cci)
    if RES == ACTION.BUY  
        alert("⚠️ Buy signal based on EMA_CCI for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL  
        alert("⚠️ Sell signal based on EMA_CCI for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_ema_cci := entryPrice

if array.includes(ASIANPAINT.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(ASIANPAINT, asianpaint_last_buy_price_macd_cmf) 
    if RES == ACTION.BUY  
         
        alert("⚠️ Buy signal based on MACD_CMF for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL  
         
        alert("⚠️ Sell signal based on MACD_CMF for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_macd_cmf := entryPrice

if array.includes(ASIANPAINT.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(ASIANPAINT, asianpaint_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY  
        
        alert("⚠️ Buy signal based on BB_DMI_MACD for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL  
        
        alert("⚠️ Sell signal based on BB_DMI_MACD for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_buy_price_bb_dmi_macd := entryPrice


GABRIEL = close_high_low_price_of_stock("GABRIEL")
GABRIEL.strategies := array.new<STRATEGY>()
GABRIEL.strategies.push(STRATEGY.DMI_STOCHASTIC)
GABRIEL.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for GABRIEL
var gabriel_last_buy_price_dmi_stochastic = float(na)
var gabriel_last_buy_price_ema_cci = float(na)
var gabriel_last_buy_price_macd_cmf = float(na)
var gabriel_last_buy_price_bb_dmi_macd = float(na)

if array.includes(GABRIEL.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(GABRIEL, gabriel_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        gabriel_last_buy_price_dmi_stochastic := entryPrice
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for GABRIEL", alert.freq_once_per_bar_close)
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_dmi_stochastic := entryPrice

if array.includes(GABRIEL.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(GABRIEL, gabriel_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_ema_cci := entryPrice

if array.includes(GABRIEL.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(GABRIEL, gabriel_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on MACD_CMF for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on MACD_CMF for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_macd_cmf := entryPrice

if array.includes(GABRIEL.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(GABRIEL, gabriel_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_buy_price_bb_dmi_macd := entryPrice


SBILIFE = close_high_low_price_of_stock("SBILIFE")
SBILIFE.strategies := array.new<STRATEGY>()
SBILIFE.strategies.push(STRATEGY.DMI_STOCHASTIC)
SBILIFE.strategies.push(STRATEGY.MACD_CMF)
SBILIFE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for SBILIFE
var sbilife_last_buy_price_dmi_stochastic = float(na)
var sbilife_last_buy_price_ema_cci = float(na)
var sbilife_last_buy_price_macd_cmf = float(na)
var sbilife_last_buy_price_bb_dmi_macd = float(na)

if array.includes(SBILIFE.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(SBILIFE, sbilife_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        sbilife_last_buy_price_dmi_stochastic := entryPrice
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SBILIFE", alert.freq_once_per_bar_close)
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_dmi_stochastic := entryPrice

if array.includes(SBILIFE.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(SBILIFE, sbilife_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_ema_cci := entryPrice

if array.includes(SBILIFE.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(SBILIFE, sbilife_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_macd_cmf := entryPrice

if array.includes(SBILIFE.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(SBILIFE, sbilife_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on BB_DMI_MACD for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on BB_DMI_MACD for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_buy_price_bb_dmi_macd := entryPrice



HAVELLS = close_high_low_price_of_stock("HAVELLS")
HAVELLS.strategies := array.new<STRATEGY>()
HAVELLS.strategies.push(STRATEGY.DMI_STOCHASTIC)
HAVELLS.strategies.push(STRATEGY.EMA_CCI)
HAVELLS.strategies.push(STRATEGY.MACD_CMF)
HAVELLS.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for HAVELLS
var havells_last_buy_price_dmi_stochastic = float(na)
var havells_last_buy_price_ema_cci = float(na)
var havells_last_buy_price_macd_cmf = float(na)
var havells_last_buy_price_bb_dmi_macd = float(na)

if array.includes(HAVELLS.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(HAVELLS, havells_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        havells_last_buy_price_dmi_stochastic := entryPrice
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for HAVELLS", alert.freq_once_per_bar_close)
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_dmi_stochastic := entryPrice

if array.includes(HAVELLS.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(HAVELLS, havells_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_ema_cci := entryPrice

if array.includes(HAVELLS.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(HAVELLS, havells_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on MACD_CMF for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on MACD_CMF for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_macd_cmf := entryPrice

if array.includes(HAVELLS.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(HAVELLS, havells_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_buy_price_bb_dmi_macd := entryPrice



ADANIGREEN = close_high_low_price_of_stock("ADANIGREEN")
ADANIGREEN.strategies := array.new<STRATEGY>()
ADANIGREEN.strategies.push(STRATEGY.DMI_STOCHASTIC)
ADANIGREEN.strategies.push(STRATEGY.EMA_CCI)
ADANIGREEN.strategies.push(STRATEGY.MACD_CMF)
// Optimized Strategy Execution for ADANIGREEN
var adanigreen_last_buy_price_dmi_stochastic = float(na)
var adanigreen_last_buy_price_ema_cci = float(na)
var adanigreen_last_buy_price_macd_cmf = float(na)
var adanigreen_last_buy_price_bb_dmi_macd = float(na)

if array.includes(ADANIGREEN.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(ADANIGREEN, adanigreen_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_dmi_stochastic := entryPrice

if array.includes(ADANIGREEN.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(ADANIGREEN, adanigreen_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_ema_cci := entryPrice

if array.includes(ADANIGREEN.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(ADANIGREEN, adanigreen_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_macd_cmf := entryPrice

if array.includes(ADANIGREEN.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(ADANIGREEN, adanigreen_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on BB_DMI_MACD for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on BB_DMI_MACD for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_buy_price_bb_dmi_macd := entryPrice



DMART = close_high_low_price_of_stock("DMART")
DMART.strategies := array.new<STRATEGY>()
DMART.strategies.push(STRATEGY.DMI_STOCHASTIC)
DMART.strategies.push(STRATEGY.EMA_CCI)
DMART.strategies.push(STRATEGY.MACD_CMF)
DMART.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for DMART
var dmart_last_buy_price_dmi_stochastic = float(na)
var dmart_last_buy_price_ema_cci = float(na)
var dmart_last_buy_price_macd_cmf = float(na)
var dmart_last_buy_price_bb_dmi_macd = float(na)

if array.includes(DMART.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(DMART, dmart_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        label.new(x=bar_index, y=high, text="buy")
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        label.new(x=bar_index, y=high, text="sell")
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_dmi_stochastic := entryPrice

if array.includes(DMART.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(DMART, dmart_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on EMA_CCI for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
         
        alert("⚠️ Sell signal based on EMA_CCI for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_ema_cci := entryPrice

if array.includes(DMART.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(DMART, dmart_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_macd_cmf := entryPrice

if array.includes(DMART.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(DMART, dmart_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for DMART", alert.freq_once_per_bar_close)
        dmart_last_buy_price_bb_dmi_macd := entryPrice


LICI = close_high_low_price_of_stock("LICI")
LICI.strategies := array.new<STRATEGY>()
LICI.strategies.push(STRATEGY.DMI_STOCHASTIC)
LICI.strategies.push(STRATEGY.EMA_CCI)
LICI.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for LICI
var lici_last_buy_price_dmi_stochastic = float(na)
var lici_last_buy_price_ema_cci = float(na)
var lici_last_buy_price_macd_cmf = float(na)
var lici_last_buy_price_bb_dmi_macd = float(na)

if array.includes(LICI.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(LICI, lici_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_dmi_stochastic := entryPrice

if array.includes(LICI.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(LICI, lici_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_ema_cci := entryPrice

if array.includes(LICI.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(LICI, lici_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_macd_cmf := entryPrice

if array.includes(LICI.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(LICI, lici_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for LICI", alert.freq_once_per_bar_close)
        lici_last_buy_price_bb_dmi_macd := entryPrice



SIEMENS = close_high_low_price_of_stock("SIEMENS")
SIEMENS.strategies := array.new<STRATEGY>()
SIEMENS.strategies.push(STRATEGY.DMI_STOCHASTIC)
SIEMENS.strategies.push(STRATEGY.EMA_CCI)
SIEMENS.strategies.push(STRATEGY.MACD_CMF)
SIEMENS.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for SIEMENS
var siemens_last_buy_price_dmi_stochastic = float(na)
var siemens_last_buy_price_ema_cci = float(na)
var siemens_last_buy_price_macd_cmf = float(na)
var siemens_last_buy_price_bb_dmi_macd = float(na)

if array.includes(SIEMENS.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(SIEMENS, siemens_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
     
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_dmi_stochastic := entryPrice

if array.includes(SIEMENS.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(SIEMENS, siemens_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on EMA_CCI for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on EMA_CCI for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_ema_cci := entryPrice

if array.includes(SIEMENS.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(SIEMENS, siemens_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_macd_cmf := entryPrice

if array.includes(SIEMENS.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(SIEMENS, siemens_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_buy_price_bb_dmi_macd := entryPrice



BAJFINANCE = close_high_low_price_of_stock("BAJFINANCE")
BAJFINANCE.strategies := array.new<STRATEGY>()
BAJFINANCE.strategies.push(STRATEGY.DMI_STOCHASTIC)
BAJFINANCE.strategies.push(STRATEGY.EMA_CCI)
BAJFINANCE.strategies.push(STRATEGY.MACD_CMF)
BAJFINANCE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BAJFINANCE
var bajfinance_last_buy_price_dmi_stochastic = float(na)
var bajfinance_last_buy_price_ema_cci = float(na)
var bajfinance_last_buy_price_macd_cmf = float(na)
var bajfinance_last_buy_price_bb_dmi_macd = float(na)

if array.includes(BAJFINANCE.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(BAJFINANCE, bajfinance_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_dmi_stochastic := entryPrice

if array.includes(BAJFINANCE.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(BAJFINANCE, bajfinance_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on EMA_CCI for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on EMA_CCI for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_ema_cci := entryPrice

if array.includes(BAJFINANCE.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(BAJFINANCE, bajfinance_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on MACD_CMF for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on MACD_CMF for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_macd_cmf := entryPrice

if array.includes(BAJFINANCE.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(BAJFINANCE, bajfinance_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_buy_price_bb_dmi_macd := entryPrice


TCI = close_high_low_price_of_stock("TCI")
TCI.strategies := array.new<STRATEGY>()
TCI.strategies.push(STRATEGY.DMI_STOCHASTIC)
// Optimized Strategy Execution for TCI
var tci_last_buy_price_dmi_stochastic = float(na)
var tci_last_buy_price_ema_cci = float(na)
var tci_last_buy_price_macd_cmf = float(na)
var tci_last_buy_price_bb_dmi_macd = float(na)

if array.includes(TCI.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(TCI, tci_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_dmi_stochastic := entryPrice

if array.includes(TCI.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(TCI, tci_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_ema_cci := entryPrice

if array.includes(TCI.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(TCI, tci_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on MACD_CMF for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        
        alert("⚠️ Sell signal based on MACD_CMF for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_macd_cmf := entryPrice

if array.includes(TCI.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(TCI, tci_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for TCI", alert.freq_once_per_bar_close)
        tci_last_buy_price_bb_dmi_macd := entryPrice


MAXHEALTH = close_high_low_price_of_stock("MAXHEALTH")
MAXHEALTH.strategies := array.new<STRATEGY>()
MAXHEALTH.strategies.push(STRATEGY.DMI_STOCHASTIC)
MAXHEALTH.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for MAXHEALTH
var maxhealth_last_buy_price_dmi_stochastic = float(na)
var maxhealth_last_buy_price_ema_cci = float(na)
var maxhealth_last_buy_price_macd_cmf = float(na)
var maxhealth_last_buy_price_bb_dmi_macd = float(na)

if array.includes(MAXHEALTH.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(MAXHEALTH, maxhealth_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_dmi_stochastic := entryPrice

if array.includes(MAXHEALTH.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(MAXHEALTH, maxhealth_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_ema_cci := entryPrice

if array.includes(MAXHEALTH.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(MAXHEALTH, maxhealth_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_macd_cmf := entryPrice

if array.includes(MAXHEALTH.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(MAXHEALTH, maxhealth_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_buy_price_bb_dmi_macd := entryPrice



BHARTIARTL = close_high_low_price_of_stock("BHARTIARTL")
BHARTIARTL.strategies := array.new<STRATEGY>()
BHARTIARTL.strategies.push(STRATEGY.DMI_STOCHASTIC)
BHARTIARTL.strategies.push(STRATEGY.EMA_CCI)
BHARTIARTL.strategies.push(STRATEGY.MACD_CMF)
BHARTIARTL.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BHARTIARTL
var bhartiartl_last_buy_price_dmi_stochastic = float(na)
var bhartiartl_last_buy_price_ema_cci = float(na)
var bhartiartl_last_buy_price_macd_cmf = float(na)
var bhartiartl_last_buy_price_bb_dmi_macd = float(na)

if array.includes(BHARTIARTL.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(BHARTIARTL, bhartiartl_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_dmi_stochastic := entryPrice

if array.includes(BHARTIARTL.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(BHARTIARTL, bhartiartl_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on EMA_CCI for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
         
        alert("⚠️ Sell signal based on EMA_CCI for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_ema_cci := entryPrice

if array.includes(BHARTIARTL.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(BHARTIARTL, bhartiartl_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_macd_cmf := entryPrice

if array.includes(BHARTIARTL.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(BHARTIARTL, bhartiartl_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_buy_price_bb_dmi_macd := entryPrice




LUPIN = close_high_low_price_of_stock("LUPIN")
LUPIN.strategies := array.new<STRATEGY>()
LUPIN.strategies.push(STRATEGY.DMI_STOCHASTIC)
LUPIN.strategies.push(STRATEGY.EMA_CCI)
LUPIN.strategies.push(STRATEGY.MACD_CMF)
LUPIN.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for LUPIN

var lupin_last_buy_price_dmi_stochastic = float(na)
var lupin_last_buy_price_ema_cci = float(na)
var lupin_last_buy_price_macd_cmf = float(na)
var lupin_last_buy_price_bb_dmi_macd = float(na)

if array.includes(LUPIN.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(LUPIN, lupin_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_dmi_stochastic := entryPrice

if array.includes(LUPIN.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(LUPIN, lupin_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_ema_cci := entryPrice

if array.includes(LUPIN.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(LUPIN, lupin_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_macd_cmf := entryPrice

if array.includes(LUPIN.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(LUPIN, lupin_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_buy_price_bb_dmi_macd := entryPrice



PAYTM = close_high_low_price_of_stock("PAYTM")
PAYTM.strategies := array.new<STRATEGY>()
PAYTM.strategies.push(STRATEGY.DMI_STOCHASTIC)
// Optimized Strategy Execution for PAYTM
var paytm_last_buy_price_dmi_stochastic = float(na)
var paytm_last_buy_price_ema_cci = float(na)
var paytm_last_buy_price_macd_cmf = float(na)
var paytm_last_buy_price_bb_dmi_macd = float(na)

if array.includes(PAYTM.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(PAYTM, paytm_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_dmi_stochastic := entryPrice

if array.includes(PAYTM.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(PAYTM, paytm_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_ema_cci := entryPrice

if array.includes(PAYTM.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(PAYTM, paytm_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_macd_cmf := entryPrice

if array.includes(PAYTM.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(PAYTM, paytm_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for PAYTM", alert.freq_once_per_bar_close)
        paytm_last_buy_price_bb_dmi_macd := entryPrice



SUZLON = close_high_low_price_of_stock("SUZLON")
SUZLON.strategies := array.new<STRATEGY>()
SUZLON.strategies.push(STRATEGY.DMI_STOCHASTIC)
SUZLON.strategies.push(STRATEGY.MACD_CMF)
SUZLON.strategies.push(STRATEGY.BB_DMI_MACD)

// Check for strategy presence and execute only if found
var suzlon_last_buy_price_dmi_stochastic = float(na)
var suzlon_last_buy_price_ema_cci = float(na)
var suzlon_last_buy_price_macd_cmf = float(na)
var suzlon_last_buy_price_bb_dmi_macd = float(na)

if array.includes(SUZLON.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(SUZLON, suzlon_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_dmi_stochastic := entryPrice

if array.includes(SUZLON.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(SUZLON, suzlon_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_ema_cci := entryPrice

if array.includes(SUZLON.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(SUZLON, suzlon_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_macd_cmf := entryPrice

if array.includes(SUZLON.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(SUZLON, suzlon_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_buy_price_bb_dmi_macd := entryPrice


MOTILALOFS = close_high_low_price_of_stock("MOTILALOFS")
MOTILALOFS.strategies := array.new<STRATEGY>()
MOTILALOFS.strategies.push(STRATEGY.DMI_STOCHASTIC)
MOTILALOFS.strategies.push(STRATEGY.EMA_CCI)
MOTILALOFS.strategies.push(STRATEGY.MACD_CMF)
MOTILALOFS.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var motilalofs_last_buy_price_dmi_stochastic = float(na)
var motilalofs_last_buy_price_ema_cci = float(na)
var motilalofs_last_buy_price_macd_cmf = float(na)
var motilalofs_last_buy_price_bb_dmi_macd = float(na)

if array.includes(MOTILALOFS.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(MOTILALOFS, motilalofs_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_dmi_stochastic := entryPrice

if array.includes(MOTILALOFS.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(MOTILALOFS, motilalofs_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_ema_cci := entryPrice

if array.includes(MOTILALOFS.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(MOTILALOFS, motilalofs_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_macd_cmf := entryPrice

if array.includes(MOTILALOFS.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(MOTILALOFS, motilalofs_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_buy_price_bb_dmi_macd := entryPrice


HCLTECH = close_high_low_price_of_stock("HCLTECH")
HCLTECH.strategies := array.new<STRATEGY>()
HCLTECH.strategies.push(STRATEGY.DMI_STOCHASTIC)
HCLTECH.strategies.push(STRATEGY.EMA_CCI)
HCLTECH.strategies.push(STRATEGY.MACD_CMF)
HCLTECH.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var hcltech_last_buy_price_dmi_stochastic = float(na)
var hcltech_last_buy_price_ema_cci = float(na)
var hcltech_last_buy_price_macd_cmf = float(na)
var hcltech_last_buy_price_bb_dmi_macd = float(na)

if array.includes(HCLTECH.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(HCLTECH, hcltech_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_dmi_stochastic := entryPrice

if array.includes(HCLTECH.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(HCLTECH, hcltech_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_ema_cci := entryPrice

if array.includes(HCLTECH.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(HCLTECH, hcltech_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_macd_cmf := entryPrice

if array.includes(HCLTECH.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(HCLTECH, hcltech_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_buy_price_bb_dmi_macd := entryPrice




KALYANKJIL = close_high_low_price_of_stock("KALYANKJIL")
KALYANKJIL.strategies := array.new<STRATEGY>()
KALYANKJIL.strategies.push(STRATEGY.DMI_STOCHASTIC)
KALYANKJIL.strategies.push(STRATEGY.EMA_CCI)
KALYANKJIL.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var kalyankjil_last_buy_price_dmi_stochastic = float(na)
var kalyankjil_last_buy_price_ema_cci = float(na)
var kalyankjil_last_buy_price_macd_cmf = float(na)
var kalyankjil_last_buy_price_bb_dmi_macd = float(na)

if array.includes(KALYANKJIL.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ] = DMI_STOCHASTIC(KALYANKJIL, kalyankjil_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
         
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
       
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_dmi_stochastic := entryPrice

if array.includes(KALYANKJIL.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ] = EMI_CCI_STRATEGY(KALYANKJIL, kalyankjil_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_ema_cci := entryPrice

if array.includes(KALYANKJIL.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ] = MACD_CMF_STRATEGY(KALYANKJIL, kalyankjil_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        
        alert("⚠️ Buy signal based on MACD_CMF for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
         
        alert("⚠️ Sell signal based on MACD_CMF for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_macd_cmf := entryPrice

if array.includes(KALYANKJIL.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ] = BB_DMI_MACD_STRATEGY(KALYANKJIL, kalyankjil_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_buy_price_bb_dmi_macd := entryPrice


ANGELONE = close_high_low_price_of_stock("ANGELONE")
ANGELONE.strategies := array.new<STRATEGY>()
ANGELONE.strategies.push(STRATEGY.DMI_STOCHASTIC)
ANGELONE.strategies.push(STRATEGY.EMA_CCI)
ANGELONE.strategies.push(STRATEGY.MACD_CMF)
ANGELONE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for ANGELONE
var angelone_last_buy_price_dmi_stochastic = float(na)
var angelone_last_buy_price_ema_cci = float(na)
var angelone_last_buy_price_macd_cmf = float(na)
var angelone_last_buy_price_bb_dmi_macd = float(na)

if array.includes(ANGELONE.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(ANGELONE, angelone_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_dmi_stochastic := entryPrice

if array.includes(ANGELONE.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(ANGELONE, angelone_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_ema_cci := entryPrice

if array.includes(ANGELONE.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(ANGELONE, angelone_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_macd_cmf := entryPrice

if array.includes(ANGELONE.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]  = BB_DMI_MACD_STRATEGY(ANGELONE, angelone_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_buy_price_bb_dmi_macd := entryPrice


WONDERLA = close_high_low_price_of_stock("WONDERLA")
WONDERLA.strategies := array.new<STRATEGY>()
WONDERLA.strategies.push(STRATEGY.DMI_STOCHASTIC)
WONDERLA.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for WONDERLA
var wonderla_last_buy_price_dmi_stochastic = float(na)
var wonderla_last_buy_price_ema_cci = float(na)
var wonderla_last_buy_price_macd_cmf = float(na)
var wonderla_last_buy_price_bb_dmi_macd = float(na)

if array.includes(WONDERLA.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(WONDERLA, wonderla_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_dmi_stochastic := entryPrice

if array.includes(WONDERLA.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(WONDERLA, wonderla_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_ema_cci := entryPrice

if array.includes(WONDERLA.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(WONDERLA, wonderla_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_macd_cmf := entryPrice

if array.includes(WONDERLA.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]  = BB_DMI_MACD_STRATEGY(WONDERLA, wonderla_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_buy_price_bb_dmi_macd := entryPrice


NUVAMA = close_high_low_price_of_stock("NUVAMA")
NUVAMA.strategies := array.new<STRATEGY>()
NUVAMA.strategies.push(STRATEGY.DMI_STOCHASTIC)
NUVAMA.strategies.push(STRATEGY.MACD_CMF)
NUVAMA.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for NUVAMA
var nuvama_last_buy_price_dmi_stochastic = float(na)
var nuvama_last_buy_price_ema_cci = float(na)
var nuvama_last_buy_price_macd_cmf = float(na)
var nuvama_last_buy_price_bb_dmi_macd = float(na)

if array.includes(NUVAMA.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(NUVAMA, nuvama_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_dmi_stochastic := entryPrice

if array.includes(NUVAMA.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(NUVAMA, nuvama_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_ema_cci := entryPrice

if array.includes(NUVAMA.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(NUVAMA, nuvama_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_macd_cmf := entryPrice

if array.includes(NUVAMA.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]  = BB_DMI_MACD_STRATEGY(NUVAMA, nuvama_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_buy_price_bb_dmi_macd := entryPrice




GRWRHITECH = close_high_low_price_of_stock("GRWRHITECH")
GRWRHITECH.strategies := array.new<STRATEGY>()
GRWRHITECH.strategies.push(STRATEGY.DMI_STOCHASTIC)
GRWRHITECH.strategies.push(STRATEGY.EMA_CCI)
GRWRHITECH.strategies.push(STRATEGY.MACD_CMF)
GRWRHITECH.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for GRWRHITECH
var grwrhitech_last_buy_price_dmi_stochastic = float(na)
var grwrhitech_last_buy_price_ema_cci = float(na)
var grwrhitech_last_buy_price_macd_cmf = float(na)
var grwrhitech_last_buy_price_bb_dmi_macd = float(na)

if array.includes(GRWRHITECH.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(GRWRHITECH , grwrhitech_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_dmi_stochastic := entryPrice

if array.includes(GRWRHITECH.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(GRWRHITECH , grwrhitech_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_ema_cci := entryPrice

if array.includes(GRWRHITECH.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(GRWRHITECH , grwrhitech_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_macd_cmf := entryPrice

if array.includes(GRWRHITECH.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]  = BB_DMI_MACD_STRATEGY(GRWRHITECH , grwrhitech_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_buy_price_bb_dmi_macd := entryPrice



NETWEB = close_high_low_price_of_stock("NETWEB")
NETWEB.strategies := array.new<STRATEGY>()
NETWEB.strategies.push(STRATEGY.DMI_STOCHASTIC)
NETWEB.strategies.push(STRATEGY.EMA_CCI)
NETWEB.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for NETWEB
var netweb_last_buy_price_dmi_stochastic = float(na)
var netweb_last_buy_price_ema_cci = float(na)
var netweb_last_buy_price_macd_cmf = float(na)
var netweb_last_buy_price_bb_dmi_macd = float(na)

if array.includes(NETWEB.strategies, STRATEGY.DMI_STOCHASTIC)
    [ RES , entryPrice ]  = DMI_STOCHASTIC(NETWEB , netweb_last_buy_price_dmi_stochastic)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_dmi_stochastic := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_dmi_stochastic := entryPrice

if array.includes(NETWEB.strategies, STRATEGY.EMA_CCI)
    [ RES , entryPrice ]  = EMI_CCI_STRATEGY(NETWEB , netweb_last_buy_price_ema_cci)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on EMA_CCI for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_ema_cci := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on EMA_CCI for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_ema_cci := entryPrice

if array.includes(NETWEB.strategies, STRATEGY.MACD_CMF)
    [ RES , entryPrice ]  = MACD_CMF_STRATEGY(NETWEB , netweb_last_buy_price_macd_cmf)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on MACD_CMF for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_macd_cmf := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on MACD_CMF for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_macd_cmf := entryPrice

if array.includes(NETWEB.strategies, STRATEGY.BB_DMI_MACD)
    [ RES , entryPrice ]  = BB_DMI_MACD_STRATEGY(NETWEB , netweb_last_buy_price_bb_dmi_macd)
    if RES == ACTION.BUY
        alert("⚠️ Buy signal based on BB_DMI_MACD for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_bb_dmi_macd := entryPrice
    if RES == ACTION.SELL
        alert("⚠️ Sell signal based on BB_DMI_MACD for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_buy_price_bb_dmi_macd := entryPrice


plot(BASF.highPrice)
plot(ADANIGREEN.lowPrice)
plot(2)

