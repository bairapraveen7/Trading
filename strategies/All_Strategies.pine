//@version=6
indicator("ALL STRATEGIES", overlay=false)

enum STRATEGY
    DMI_STOCHASTIC = "DMI + STOCHASTIC"
    EMA_CCI = "EMA_CCI"
    MACD_CMF = "MACD_CMF"
    BB_DMI_MACD = "BB_DMI_MACD"

enum ACTION 
    BUY = "BUY"
    SELL = "SELL"

type stock
    string name
    float closePrice 
    float highPrice
    float lowPrice
    array<STRATEGY> strategies

close_high_low_price_of_stock(name) => 
    [closePrice, highPrice, lowPrice] = request.security(name, "D", [close, high, low])
    stock.new(name = name, closePrice = closePrice, highPrice = highPrice, lowPrice = lowPrice)

/// ################ DMI + STOCHASTIC STRATEGY #########################

DMI_STOCHASTIC(stock) => 

    lensig = input.int(20, title="ADX Smoothing", minval=1)
    len = input.int(20, minval=1, title="DI Length")
    stochLength = input(20, title="Stochastic Length")
    smoothK = input(3, title="Stochastic %K Smoothing")
    smoothD = input(3, title="Stochastic %D Smoothing")
    adxlen = input(14, title="ADX Smoothing")
    dilen = input(14, title="DI Length")

    up = ta.change(stock.highPrice)
    down = -ta.change(stock.lowPrice)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    truerange = ta.rma(ta.tr, len)
    plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, len) / truerange)

   
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)

    // Calculate Stochastic Oscillator
    k = ta.sma(ta.stoch(stock.closePrice, stock.highPrice, stock.lowPrice, stochLength), smoothK)
    d = ta.sma(k, smoothD)

    // Entry Condition: +DI is at least 4% greater than -DI AND Stochastic is above 50
    longCondition = (plus > minus * 1.04)  and k > 50

    // Exit Condition: +DI crosses below -DI OR Stochastic falls below 30
    exitCondition = (plus < minus * 1.04) and k < 30

    // Execute trade
    if (longCondition)
        ACTION.BUY
         

    // Close trade when exit condition met
    if (exitCondition)
        ACTION.SELL


// ###################### EMA + CCI STRATEGY #####################


EMI_CCI_STRATEGY(STOCK) => 
    // Input for EMAs
    ema5 = ta.ema(STOCK.closePrice, 5)
    ema8 = ta.ema(STOCK.closePrice, 8)
    ema13 = ta.ema(STOCK.closePrice, 13)

    // Input for CCI
    cciLength = input(20, title="CCI Length")
    cci = ta.cci(STOCK.closePrice, cciLength)

    // Entry Condition
    longCondition = ta.crossover(ema5, ema8) and ema5 > ema13 and ema8 > ema13 and cci > 100

    // Exit Condition
    exitCondition = (ta.crossunder(ema5, ema8) and ema5 < ema13 and ema8 < ema13) and cci < 100

    // Execute trade
    if (longCondition)
        ACTION.BUY
         

    if (exitCondition)
        ACTION.SELL


/// #################### MACD + CMF STRATEGY ########################

MACD_CMF_STRATEGY(STOCK) => 

    sma50 = ta.sma(STOCK.closePrice,50)
    sma20 = ta.sma(STOCK.closePrice,20)

    // Calculate CMF (Chaikin Money Flow)
    var cumVol = 0.
    cumVol += nz(volume)
    if barstate.islast and cumVol == 0
        runtime.error("No volume is provided by the data vendor.")
    length = input.int(20, minval=1)
    ad = STOCK.closePrice==STOCK.highPrice and STOCK.closePrice==STOCK.lowPrice or STOCK.highPrice==STOCK.lowPrice ? 0 : ((2*STOCK.closePrice-STOCK.lowPrice-STOCK.highPrice)/(STOCK.highPrice-STOCK.lowPrice))*volume
    mf = math.sum(ad, length) / math.sum(volume, length)
    // plot(mf, "CMF",  color = #43A047)
    // hline(0, "Zero", color = #787B86, linestyle = hline.style_dashed)

    // Calculate MACD
    // Getting inputs
    fast_length = input(title = "Fast Length", defval = 12)
    slow_length = input(title = "Slow Length", defval = 26)
    src = STOCK.closePrice
    signal_length = input.int(title = "Signal Smoothing",  minval = 1, maxval = 50, defval = 9, display = display.data_window)
    sma_source = input.string(title = "Oscillator MA Type",  defval = "EMA", options = ["SMA", "EMA"], display = display.data_window)
    sma_signal = input.string(title = "Signal Line MA Type", defval = "EMA", options = ["SMA", "EMA"], display = display.data_window)
    // Calculating
    fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
    slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
    macd = fast_ma - slow_ma
    signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
    hist = macd - signal
    postitve_diff_percent = ((macd - signal ) / math.abs(signal)) * 100
    negative_diff_percent = ((signal - macd ) / math.abs(signal)) * 100

    //alertcondition(hist[1] >= 0 and hist < 0, title = 'Rising to falling', message = 'The MACD histogram switched from a rising to falling state')
    //alertcondition(hist[1] <= 0 and hist > 0, title = 'Falling to rising', message = 'The MACD histogram switched from a falling to rising state')

    // hline(0, "Zero Line", color = color.new(#787B86, 50))
    // plot(hist, title = "Histogram", style = plot.style_columns, color = (hist >= 0 ? (hist[1] < hist ? #26A69A : #B2DFDB) : (hist[1] < hist ? #FFCDD2 : #FF5252)))
    // plot(macd,   title = "MACD",   color = #2962FF, force_overlay = false)
    // plot(signal, title = "Signal", color = #FF6D00,force_overlay = false)

    // Entry Condition: CMF > 0.05 AND MACD Line > Signal Line
    longCondition = mf > 0.05 and STOCK.closePrice > sma20 and macd > signal and postitve_diff_percent > 4

    // Exit Condition: mf < 0.05 OR MACD Line < Signal Line
    exitCondition = ta.crossunder(STOCK.closePrice, sma50)

    // Enter trade when conditions are met
    if (longCondition)
        ACTION.BUY

    // Exit trade when exit conditions are met
    if (exitCondition)
        ACTION.SELL


// ################# BB + DMI + MACD STRATEGY ########################

BB_DMI_MACD_STRATEGY(STOCK) => 

    // Bollinger Bands Calculation
    length = 20
    src = STOCK.closePrice
    mult = 2.0
    basis = ta.sma(src, length)
    sma20 = ta.sma(STOCK.closePrice,20)
    sma50 = ta.sma(STOCK.closePrice,50)
    dev = mult * ta.stdev(src, length)
    upperBB = basis + dev
    lowerBB = basis - dev
    b_percent = (src - lowerBB) / (upperBB - lowerBB)

    // Bollinger Bandwidth Calculation
    bb_width = ((upperBB - lowerBB) / basis) * 100

    adxlen = input(14, title="ADX Smoothing")
    dilen = input(14, title="DI Length")
    up = ta.change(STOCK.highPrice)
    down = -ta.change(STOCK.lowPrice)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    truerange = ta.rma(ta.tr, dilen)
    plus = fixnan(100 * ta.rma(plusDM, dilen) / truerange)
    minus = fixnan(100 * ta.rma(minusDM, dilen) / truerange)

   
    sum = plus + minus
    adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)


    // MACD Calculation
    [macdLine, signalLine, _] = ta.macd(STOCK.closePrice, 12, 26, 9)
    postitve_diff_percent = ((macdLine - signalLine ) / math.abs(signalLine)) * 100
    negative_diff_percent = ((signalLine - macdLine ) / math.abs(signalLine)) * 100

    // Entry Condition
    longCondition = sma20 > sma50 and b_percent > 0.7 and adx > 20  and macdLine > signalLine and postitve_diff_percent > 4
    if (longCondition)
        ACTION.BUY

    // Exit Condition
    exitCondition = ta.crossunder(sma20,sma50)
    if (exitCondition)
        ACTION.SELL

// Fetch daily closing prices for each stock
BASF = close_high_low_price_of_stock("BASF")
BASF.strategies := array.new<STRATEGY>()
BASF.strategies.push(STRATEGY.DMI_STOCHASTIC)
BASF.strategies.push(STRATEGY.EMA_CCI)
BASF.strategies.push(STRATEGY.MACD_CMF)
BASF.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BASF
var basf_last_signal_dmi_stochastic = "NONE"
var basf_last_signal_ema_cci = "NONE"
var basf_last_signal_macd_cmf = "NONE"
var basf_last_signal_bb_dmi_macd = "NONE"

if array.includes(BASF.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(BASF)
    if RES == ACTION.BUY and basf_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and basf_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_dmi_stochastic := 'SELL'

if array.includes(BASF.strategies, STRATEGY.EMA_CCI)
    ACTION RES =  EMI_CCI_STRATEGY(BASF)
    if RES == ACTION.BUY and basf_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and basf_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_ema_cci := 'SELL'

if array.includes(BASF.strategies, STRATEGY.MACD_CMF)
    ACTION RES =  MACD_CMF_STRATEGY(BASF) 
    if RES == ACTION.BUY and basf_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and basf_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_macd_cmf := 'SELL'

if array.includes(BASF.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES  =  BB_DMI_MACD_STRATEGY(BASF)
    if RES == ACTION.BUY and basf_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and basf_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for BASF", alert.freq_once_per_bar_close)
        basf_last_signal_bb_dmi_macd := 'SELL'


ASIANPAINT = close_high_low_price_of_stock("ASIANPAINT")
ASIANPAINT.strategies := array.new<STRATEGY>()
ASIANPAINT.strategies.push(STRATEGY.DMI_STOCHASTIC)
ASIANPAINT.strategies.push(STRATEGY.EMA_CCI)
ASIANPAINT.strategies.push(STRATEGY.MACD_CMF)
ASIANPAINT.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for ASIANPAINT
var asianpaint_last_signal_dmi_stochastic = "NONE"
var asianpaint_last_signal_ema_cci = "NONE"
var asianpaint_last_signal_macd_cmf = "NONE"
var asianpaint_last_signal_bb_dmi_macd = "NONE"

if array.includes(ASIANPAINT.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(ASIANPAINT)
    if RES == ACTION.BUY and asianpaint_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and asianpaint_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_dmi_stochastic := 'SELL'

if array.includes(ASIANPAINT.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(ASIANPAINT)
    if RES == ACTION.BUY and asianpaint_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and asianpaint_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_ema_cci := 'SELL'

if array.includes(ASIANPAINT.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(ASIANPAINT)
    if RES == ACTION.BUY and asianpaint_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and asianpaint_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_macd_cmf := 'SELL'

if array.includes(ASIANPAINT.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(ASIANPAINT)
    if RES == ACTION.BUY and asianpaint_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and asianpaint_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for ASIANPAINT", alert.freq_once_per_bar_close)
        asianpaint_last_signal_bb_dmi_macd := 'SELL'


SBICARD = close_high_low_price_of_stock("SBICARD")
SBICARD.strategies := array.new<STRATEGY>()
SBICARD.strategies.push(STRATEGY.DMI_STOCHASTIC)
// Optimized Strategy Execution for SBICARD
var sbicard_last_signal_dmi_stochastic = "NONE"
var sbicard_last_signal_ema_cci = "NONE"
var sbicard_last_signal_macd_cmf = "NONE"
var sbicard_last_signal_bb_dmi_macd = "NONE"

if array.includes(SBICARD.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(SBICARD)
    if RES == ACTION.BUY and sbicard_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and sbicard_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_dmi_stochastic := 'SELL'

if array.includes(SBICARD.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(SBICARD)
    if RES == ACTION.BUY and sbicard_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and sbicard_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_ema_cci := 'SELL'

if array.includes(SBICARD.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(SBICARD)
    if RES == ACTION.BUY and sbicard_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and sbicard_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_macd_cmf := 'SELL'

if array.includes(SBICARD.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(SBICARD)
    if RES == ACTION.BUY and sbicard_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and sbicard_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for SBICARD", alert.freq_once_per_bar_close)
        sbicard_last_signal_bb_dmi_macd := 'SELL'





GABRIEL = close_high_low_price_of_stock("GABRIEL")
GABRIEL.strategies := array.new<STRATEGY>()
GABRIEL.strategies.push(STRATEGY.DMI_STOCHASTIC)
GABRIEL.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for GABRIEL
var gabriel_last_signal_dmi_stochastic = "NONE"
var gabriel_last_signal_ema_cci = "NONE"
var gabriel_last_signal_macd_cmf = "NONE"
var gabriel_last_signal_bb_dmi_macd = "NONE"

if array.includes(GABRIEL.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(GABRIEL)
    if RES == ACTION.BUY and gabriel_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and gabriel_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_dmi_stochastic := 'SELL'

if array.includes(GABRIEL.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(GABRIEL)
    if RES == ACTION.BUY and gabriel_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and gabriel_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_ema_cci := 'SELL'

if array.includes(GABRIEL.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(GABRIEL)
    if RES == ACTION.BUY and gabriel_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and gabriel_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_macd_cmf := 'SELL'

if array.includes(GABRIEL.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(GABRIEL)
    if RES == ACTION.BUY and gabriel_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and gabriel_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for GABRIEL", alert.freq_once_per_bar_close)
        gabriel_last_signal_bb_dmi_macd := 'SELL'





SBILIFE = close_high_low_price_of_stock("SBILIFE")
SBILIFE.strategies := array.new<STRATEGY>()
SBILIFE.strategies.push(STRATEGY.DMI_STOCHASTIC)
SBILIFE.strategies.push(STRATEGY.MACD_CMF)
SBILIFE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for SBILIFE
var sbilife_last_signal_dmi_stochastic = "NONE"
var sbilife_last_signal_ema_cci = "NONE"
var sbilife_last_signal_macd_cmf = "NONE"
var sbilife_last_signal_bb_dmi_macd = "NONE"

if array.includes(SBILIFE.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(SBILIFE)
    if RES == ACTION.BUY and sbilife_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and sbilife_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_dmi_stochastic := 'SELL'

if array.includes(SBILIFE.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(SBILIFE)
    if RES == ACTION.BUY and sbilife_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and sbilife_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_ema_cci := 'SELL'

if array.includes(SBILIFE.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(SBILIFE)
    if RES == ACTION.BUY and sbilife_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and sbilife_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_macd_cmf := 'SELL'

if array.includes(SBILIFE.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(SBILIFE)
    if RES == ACTION.BUY and sbilife_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and sbilife_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for SBILIFE", alert.freq_once_per_bar_close)
        sbilife_last_signal_bb_dmi_macd := 'SELL'





HAVELLS = close_high_low_price_of_stock("HAVELLS")
HAVELLS.strategies := array.new<STRATEGY>()
HAVELLS.strategies.push(STRATEGY.DMI_STOCHASTIC)
HAVELLS.strategies.push(STRATEGY.EMA_CCI)
HAVELLS.strategies.push(STRATEGY.MACD_CMF)
HAVELLS.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for HAVELLS
var havells_last_signal_dmi_stochastic = "NONE"
var havells_last_signal_ema_cci = "NONE"
var havells_last_signal_macd_cmf = "NONE"
var havells_last_signal_bb_dmi_macd = "NONE"

if array.includes(HAVELLS.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(HAVELLS)
    if RES == ACTION.BUY and havells_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and havells_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_dmi_stochastic := 'SELL'

if array.includes(HAVELLS.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(HAVELLS)
    if RES == ACTION.BUY and havells_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and havells_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_ema_cci := 'SELL'

if array.includes(HAVELLS.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(HAVELLS)
    if RES == ACTION.BUY and havells_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and havells_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_macd_cmf := 'SELL'

if array.includes(HAVELLS.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(HAVELLS)
    if RES == ACTION.BUY and havells_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and havells_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for HAVELLS", alert.freq_once_per_bar_close)
        havells_last_signal_bb_dmi_macd := 'SELL'





ADANIGREEN = close_high_low_price_of_stock("ADANIGREEN")
ADANIGREEN.strategies := array.new<STRATEGY>()
ADANIGREEN.strategies.push(STRATEGY.DMI_STOCHASTIC)
ADANIGREEN.strategies.push(STRATEGY.EMA_CCI)
ADANIGREEN.strategies.push(STRATEGY.MACD_CMF)
// Optimized Strategy Execution for ADANIGREEN
var adanigreen_last_signal_dmi_stochastic = "NONE"
var adanigreen_last_signal_ema_cci = "NONE"
var adanigreen_last_signal_macd_cmf = "NONE"
var adanigreen_last_signal_bb_dmi_macd = "NONE"

if array.includes(ADANIGREEN.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(ADANIGREEN)
    if RES == ACTION.BUY and adanigreen_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and adanigreen_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_dmi_stochastic := 'SELL'

if array.includes(ADANIGREEN.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(ADANIGREEN)
    if RES == ACTION.BUY and adanigreen_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and adanigreen_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_ema_cci := 'SELL'

if array.includes(ADANIGREEN.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(ADANIGREEN)
    if RES == ACTION.BUY and adanigreen_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and adanigreen_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_macd_cmf := 'SELL'

if array.includes(ADANIGREEN.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(ADANIGREEN)
    if RES == ACTION.BUY and adanigreen_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and adanigreen_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for ADANIGREEN", alert.freq_once_per_bar_close)
        adanigreen_last_signal_bb_dmi_macd := 'SELL'





DMART = close_high_low_price_of_stock("DMART")
DMART.strategies := array.new<STRATEGY>()
DMART.strategies.push(STRATEGY.DMI_STOCHASTIC)
DMART.strategies.push(STRATEGY.EMA_CCI)
DMART.strategies.push(STRATEGY.MACD_CMF)
DMART.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for DMART
var dmart_last_signal_dmi_stochastic = "NONE"
var dmart_last_signal_ema_cci = "NONE"
var dmart_last_signal_macd_cmf = "NONE"
var dmart_last_signal_bb_dmi_macd = "NONE"

if array.includes(DMART.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(DMART)
    if RES == ACTION.BUY and dmart_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and dmart_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_dmi_stochastic := 'SELL'

if array.includes(DMART.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(DMART)
    if RES == ACTION.BUY and dmart_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and dmart_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_ema_cci := 'SELL'

if array.includes(DMART.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(DMART)
    if RES == ACTION.BUY and dmart_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and dmart_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_macd_cmf := 'SELL'

if array.includes(DMART.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(DMART)
    if RES == ACTION.BUY and dmart_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and dmart_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for DMART", alert.freq_once_per_bar_close)
        dmart_last_signal_bb_dmi_macd := 'SELL'





LICI = close_high_low_price_of_stock("LICI")
LICI.strategies := array.new<STRATEGY>()
LICI.strategies.push(STRATEGY.DMI_STOCHASTIC)
LICI.strategies.push(STRATEGY.EMA_CCI)
LICI.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for LICI
var lici_last_signal_dmi_stochastic = "NONE"
var lici_last_signal_ema_cci = "NONE"
var lici_last_signal_macd_cmf = "NONE"
var lici_last_signal_bb_dmi_macd = "NONE"

if array.includes(LICI.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(LICI)
    if RES == ACTION.BUY and lici_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and lici_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_dmi_stochastic := 'SELL'

if array.includes(LICI.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(LICI)
    if RES == ACTION.BUY and lici_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and lici_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_ema_cci := 'SELL'

if array.includes(LICI.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(LICI)
    if RES == ACTION.BUY and lici_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and lici_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_macd_cmf := 'SELL'

if array.includes(LICI.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(LICI)
    if RES == ACTION.BUY and lici_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and lici_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for LICI", alert.freq_once_per_bar_close)
        lici_last_signal_bb_dmi_macd := 'SELL'




SIEMENS = close_high_low_price_of_stock("SIEMENS")
SIEMENS.strategies := array.new<STRATEGY>()
SIEMENS.strategies.push(STRATEGY.DMI_STOCHASTIC)
SIEMENS.strategies.push(STRATEGY.EMA_CCI)
SIEMENS.strategies.push(STRATEGY.MACD_CMF)
SIEMENS.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for SIEMENS
var siemens_last_signal_dmi_stochastic = "NONE"
var siemens_last_signal_ema_cci = "NONE"
var siemens_last_signal_macd_cmf = "NONE"
var siemens_last_signal_bb_dmi_macd = "NONE"

if array.includes(SIEMENS.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(SIEMENS)
    if RES == ACTION.BUY and siemens_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and siemens_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_dmi_stochastic := 'SELL'

if array.includes(SIEMENS.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(SIEMENS)
    if RES == ACTION.BUY and siemens_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and siemens_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_ema_cci := 'SELL'

if array.includes(SIEMENS.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(SIEMENS)
    if RES == ACTION.BUY and siemens_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and siemens_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_macd_cmf := 'SELL'

if array.includes(SIEMENS.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(SIEMENS)
    if RES == ACTION.BUY and siemens_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and siemens_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for SIEMENS", alert.freq_once_per_bar_close)
        siemens_last_signal_bb_dmi_macd := 'SELL'





BAJFINANCE = close_high_low_price_of_stock("BAJFINANCE")
BAJFINANCE.strategies := array.new<STRATEGY>()
BAJFINANCE.strategies.push(STRATEGY.DMI_STOCHASTIC)
BAJFINANCE.strategies.push(STRATEGY.EMA_CCI)
BAJFINANCE.strategies.push(STRATEGY.MACD_CMF)
BAJFINANCE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BAJFINANCE
var bajfinance_last_signal_dmi_stochastic = "NONE"
var bajfinance_last_signal_ema_cci = "NONE"
var bajfinance_last_signal_macd_cmf = "NONE"
var bajfinance_last_signal_bb_dmi_macd = "NONE"

if array.includes(BAJFINANCE.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(BAJFINANCE)
    if RES == ACTION.BUY and bajfinance_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and bajfinance_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_dmi_stochastic := 'SELL'

if array.includes(BAJFINANCE.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(BAJFINANCE)
    if RES == ACTION.BUY and bajfinance_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and bajfinance_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_ema_cci := 'SELL'

if array.includes(BAJFINANCE.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(BAJFINANCE)
    if RES == ACTION.BUY and bajfinance_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and bajfinance_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_macd_cmf := 'SELL'

if array.includes(BAJFINANCE.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(BAJFINANCE)
    if RES == ACTION.BUY and bajfinance_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and bajfinance_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for BAJFINANCE", alert.freq_once_per_bar_close)
        bajfinance_last_signal_bb_dmi_macd := 'SELL'




TCI = close_high_low_price_of_stock("TCI")
TCI.strategies := array.new<STRATEGY>()
TCI.strategies.push(STRATEGY.DMI_STOCHASTIC)
// Optimized Strategy Execution for TCI
var tci_last_signal_dmi_stochastic = "NONE"
var tci_last_signal_ema_cci = "NONE"
var tci_last_signal_macd_cmf = "NONE"
var tci_last_signal_bb_dmi_macd = "NONE"

if array.includes(TCI.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(TCI)
    if RES == ACTION.BUY and tci_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and tci_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_dmi_stochastic := 'SELL'

if array.includes(TCI.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(TCI)
    if RES == ACTION.BUY and tci_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and tci_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_ema_cci := 'SELL'

if array.includes(TCI.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(TCI)
    if RES == ACTION.BUY and tci_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and tci_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_macd_cmf := 'SELL'

if array.includes(TCI.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(TCI)
    if RES == ACTION.BUY and tci_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and tci_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for TCI", alert.freq_once_per_bar_close)
        tci_last_signal_bb_dmi_macd := 'SELL'




MAXHEALTH = close_high_low_price_of_stock("MAXHEALTH")
MAXHEALTH.strategies := array.new<STRATEGY>()
MAXHEALTH.strategies.push(STRATEGY.DMI_STOCHASTIC)
MAXHEALTH.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for MAXHEALTH
var maxhealth_last_signal_dmi_stochastic = "NONE"
var maxhealth_last_signal_ema_cci = "NONE"
var maxhealth_last_signal_macd_cmf = "NONE"
var maxhealth_last_signal_bb_dmi_macd = "NONE"

if array.includes(MAXHEALTH.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(MAXHEALTH)
    if RES == ACTION.BUY and maxhealth_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and maxhealth_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_dmi_stochastic := 'SELL'

if array.includes(MAXHEALTH.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(MAXHEALTH)
    if RES == ACTION.BUY and maxhealth_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and maxhealth_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_ema_cci := 'SELL'

if array.includes(MAXHEALTH.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(MAXHEALTH)
    if RES == ACTION.BUY and maxhealth_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and maxhealth_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_macd_cmf := 'SELL'

if array.includes(MAXHEALTH.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(MAXHEALTH)
    if RES == ACTION.BUY and maxhealth_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and maxhealth_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for MAXHEALTH", alert.freq_once_per_bar_close)
        maxhealth_last_signal_bb_dmi_macd := 'SELL'





BHARTIARTL = close_high_low_price_of_stock("BHARTIARTL")
BHARTIARTL.strategies := array.new<STRATEGY>()
BHARTIARTL.strategies.push(STRATEGY.DMI_STOCHASTIC)
BHARTIARTL.strategies.push(STRATEGY.EMA_CCI)
BHARTIARTL.strategies.push(STRATEGY.MACD_CMF)
BHARTIARTL.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for BHARTIARTL
var bhartiartl_last_signal_dmi_stochastic = "NONE"
var bhartiartl_last_signal_ema_cci = "NONE"
var bhartiartl_last_signal_macd_cmf = "NONE"
var bhartiartl_last_signal_bb_dmi_macd = "NONE"

if array.includes(BHARTIARTL.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(BHARTIARTL)
    if RES == ACTION.BUY and bhartiartl_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and bhartiartl_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_dmi_stochastic := 'SELL'

if array.includes(BHARTIARTL.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(BHARTIARTL)
    if RES == ACTION.BUY and bhartiartl_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and bhartiartl_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_ema_cci := 'SELL'

if array.includes(BHARTIARTL.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(BHARTIARTL)
    if RES == ACTION.BUY and bhartiartl_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and bhartiartl_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_macd_cmf := 'SELL'

if array.includes(BHARTIARTL.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(BHARTIARTL)
    if RES == ACTION.BUY and bhartiartl_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and bhartiartl_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for BHARTIARTL", alert.freq_once_per_bar_close)
        bhartiartl_last_signal_bb_dmi_macd := 'SELL'





LUPIN = close_high_low_price_of_stock("LUPIN")
LUPIN.strategies := array.new<STRATEGY>()
LUPIN.strategies.push(STRATEGY.DMI_STOCHASTIC)
LUPIN.strategies.push(STRATEGY.EMA_CCI)
LUPIN.strategies.push(STRATEGY.MACD_CMF)
LUPIN.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for LUPIN
var lupin_last_signal_dmi_stochastic = "NONE"
var lupin_last_signal_ema_cci = "NONE"
var lupin_last_signal_macd_cmf = "NONE"
var lupin_last_signal_bb_dmi_macd = "NONE"

if array.includes(LUPIN.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(LUPIN)
    if RES == ACTION.BUY and lupin_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and lupin_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_dmi_stochastic := 'SELL'

if array.includes(LUPIN.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(LUPIN)
    if RES == ACTION.BUY and lupin_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and lupin_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_ema_cci := 'SELL'

if array.includes(LUPIN.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(LUPIN)
    if RES == ACTION.BUY and lupin_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and lupin_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_macd_cmf := 'SELL'

if array.includes(LUPIN.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(LUPIN)
    if RES == ACTION.BUY and lupin_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and lupin_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for LUPIN", alert.freq_once_per_bar_close)
        lupin_last_signal_bb_dmi_macd := 'SELL'




INOXINDIA = close_high_low_price_of_stock("INOXINDIA")
INOXINDIA.strategies := array.new<STRATEGY>()
INOXINDIA.strategies.push(STRATEGY.DMI_STOCHASTIC)
// Optimized Strategy Execution for INOXINDIA
var inoxindia_last_signal_dmi_stochastic = "NONE"
var inoxindia_last_signal_ema_cci = "NONE"
var inoxindia_last_signal_macd_cmf = "NONE"
var inoxindia_last_signal_bb_dmi_macd = "NONE"

if array.includes(INOXINDIA.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(INOXINDIA)
    if RES == ACTION.BUY and inoxindia_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and inoxindia_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_dmi_stochastic := 'SELL'

if array.includes(INOXINDIA.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(INOXINDIA)
    if RES == ACTION.BUY and inoxindia_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and inoxindia_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_ema_cci := 'SELL'

if array.includes(INOXINDIA.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(INOXINDIA)
    if RES == ACTION.BUY and inoxindia_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and inoxindia_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_macd_cmf := 'SELL'

if array.includes(INOXINDIA.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(INOXINDIA)
    if RES == ACTION.BUY and inoxindia_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and inoxindia_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for INOXINDIA", alert.freq_once_per_bar_close)
        inoxindia_last_signal_bb_dmi_macd := 'SELL'





SUZLON = close_high_low_price_of_stock("SUZLON")
SUZLON.strategies := array.new<STRATEGY>()
SUZLON.strategies.push(STRATEGY.DMI_STOCHASTIC)
SUZLON.strategies.push(STRATEGY.MACD_CMF)
SUZLON.strategies.push(STRATEGY.BB_DMI_MACD)

// Check for strategy presence and execute only if found
var suzlon_last_signal_dmi_stochastic = "NONE"
var suzlon_last_signal_ema_cci = "NONE"
var suzlon_last_signal_macd_cmf = "NONE"
var suzlon_last_signal_bb_dmi_macd = "NONE"

if array.includes(SUZLON.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(SUZLON)
    if RES == ACTION.BUY and suzlon_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and suzlon_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_dmi_stochastic := 'SELL'

if array.includes(SUZLON.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(SUZLON)
    if RES == ACTION.BUY and suzlon_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and suzlon_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_ema_cci := 'SELL'

if array.includes(SUZLON.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(SUZLON)
    if RES == ACTION.BUY and suzlon_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and suzlon_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_macd_cmf := 'SELL'

if array.includes(SUZLON.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(SUZLON)
    if RES == ACTION.BUY and suzlon_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and suzlon_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for SUZLON", alert.freq_once_per_bar_close)
        suzlon_last_signal_bb_dmi_macd := 'SELL'




MOTILALOFS = close_high_low_price_of_stock("MOTILALOFS")
MOTILALOFS.strategies := array.new<STRATEGY>()
MOTILALOFS.strategies.push(STRATEGY.DMI_STOCHASTIC)
MOTILALOFS.strategies.push(STRATEGY.EMA_CCI)
MOTILALOFS.strategies.push(STRATEGY.MACD_CMF)
MOTILALOFS.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var motilalofs_last_signal_dmi_stochastic = "NONE"
var motilalofs_last_signal_ema_cci = "NONE"
var motilalofs_last_signal_macd_cmf = "NONE"
var motilalofs_last_signal_bb_dmi_macd = "NONE"

if array.includes(MOTILALOFS.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(MOTILALOFS)
    if RES == ACTION.BUY and motilalofs_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and motilalofs_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_dmi_stochastic := 'SELL'

if array.includes(MOTILALOFS.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(MOTILALOFS)
    if RES == ACTION.BUY and motilalofs_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and motilalofs_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_ema_cci := 'SELL'

if array.includes(MOTILALOFS.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(MOTILALOFS)
    if RES == ACTION.BUY and motilalofs_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and motilalofs_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_macd_cmf := 'SELL'

if array.includes(MOTILALOFS.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(MOTILALOFS)
    if RES == ACTION.BUY and motilalofs_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and motilalofs_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for MOTILALOFS", alert.freq_once_per_bar_close)
        motilalofs_last_signal_bb_dmi_macd := 'SELL'





HCLTECH = close_high_low_price_of_stock("HCLTECH")
HCLTECH.strategies := array.new<STRATEGY>()
HCLTECH.strategies.push(STRATEGY.DMI_STOCHASTIC)
HCLTECH.strategies.push(STRATEGY.EMA_CCI)
HCLTECH.strategies.push(STRATEGY.MACD_CMF)
HCLTECH.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var hcltech_last_signal_dmi_stochastic = "NONE"
var hcltech_last_signal_ema_cci = "NONE"
var hcltech_last_signal_macd_cmf = "NONE"
var hcltech_last_signal_bb_dmi_macd = "NONE"

if array.includes(HCLTECH.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(HCLTECH)
    if RES == ACTION.BUY and hcltech_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and hcltech_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_dmi_stochastic := 'SELL'

if array.includes(HCLTECH.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(HCLTECH)
    if RES == ACTION.BUY and hcltech_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and hcltech_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_ema_cci := 'SELL'

if array.includes(HCLTECH.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(HCLTECH)
    if RES == ACTION.BUY and hcltech_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and hcltech_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_macd_cmf := 'SELL'

if array.includes(HCLTECH.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(HCLTECH)
    if RES == ACTION.BUY and hcltech_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and hcltech_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for HCLTECH", alert.freq_once_per_bar_close)
        hcltech_last_signal_bb_dmi_macd := 'SELL'





KALYANKJIL = close_high_low_price_of_stock("KALYANKJIL")
KALYANKJIL.strategies := array.new<STRATEGY>()
KALYANKJIL.strategies.push(STRATEGY.DMI_STOCHASTIC)
KALYANKJIL.strategies.push(STRATEGY.EMA_CCI)
KALYANKJIL.strategies.push(STRATEGY.BB_DMI_MACD)
// Check for strategy presence and execute only if found
var kalyankjil_last_signal_dmi_stochastic = "NONE"
var kalyankjil_last_signal_ema_cci = "NONE"
var kalyankjil_last_signal_macd_cmf = "NONE"
var kalyankjil_last_signal_bb_dmi_macd = "NONE"

if array.includes(KALYANKJIL.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(KALYANKJIL)
    if RES == ACTION.BUY and kalyankjil_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and kalyankjil_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_dmi_stochastic := 'SELL'

if array.includes(KALYANKJIL.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(KALYANKJIL)
    if RES == ACTION.BUY and kalyankjil_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and kalyankjil_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_ema_cci := 'SELL'

if array.includes(KALYANKJIL.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(KALYANKJIL)
    if RES == ACTION.BUY and kalyankjil_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and kalyankjil_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_macd_cmf := 'SELL'

if array.includes(KALYANKJIL.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(KALYANKJIL)
    if RES == ACTION.BUY and kalyankjil_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and kalyankjil_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for KALYANKJIL", alert.freq_once_per_bar_close)
        kalyankjil_last_signal_bb_dmi_macd := 'SELL'




ANGELONE = close_high_low_price_of_stock("ANGELONE")
ANGELONE.strategies := array.new<STRATEGY>()
ANGELONE.strategies.push(STRATEGY.DMI_STOCHASTIC)
ANGELONE.strategies.push(STRATEGY.EMA_CCI)
ANGELONE.strategies.push(STRATEGY.MACD_CMF)
ANGELONE.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for ANGELONE
var angelone_last_signal_dmi_stochastic = "NONE"
var angelone_last_signal_ema_cci = "NONE"
var angelone_last_signal_macd_cmf = "NONE"
var angelone_last_signal_bb_dmi_macd = "NONE"

if array.includes(ANGELONE.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(ANGELONE)
    if RES == ACTION.BUY and angelone_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and angelone_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_dmi_stochastic := 'SELL'

if array.includes(ANGELONE.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(ANGELONE)
    if RES == ACTION.BUY and angelone_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and angelone_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_ema_cci := 'SELL'

if array.includes(ANGELONE.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(ANGELONE)
    if RES == ACTION.BUY and angelone_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and angelone_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_macd_cmf := 'SELL'

if array.includes(ANGELONE.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(ANGELONE)
    if RES == ACTION.BUY and angelone_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and angelone_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for ANGELONE", alert.freq_once_per_bar_close)
        angelone_last_signal_bb_dmi_macd := 'SELL'




WONDERLA = close_high_low_price_of_stock("WONDERLA")
WONDERLA.strategies := array.new<STRATEGY>()
WONDERLA.strategies.push(STRATEGY.DMI_STOCHASTIC)
WONDERLA.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for WONDERLA
var wonderla_last_signal_dmi_stochastic = "NONE"
var wonderla_last_signal_ema_cci = "NONE"
var wonderla_last_signal_macd_cmf = "NONE"
var wonderla_last_signal_bb_dmi_macd = "NONE"

if array.includes(WONDERLA.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(WONDERLA)
    if RES == ACTION.BUY and wonderla_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and wonderla_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_dmi_stochastic := 'SELL'

if array.includes(WONDERLA.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(WONDERLA)
    if RES == ACTION.BUY and wonderla_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and wonderla_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_ema_cci := 'SELL'

if array.includes(WONDERLA.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(WONDERLA)
    if RES == ACTION.BUY and wonderla_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and wonderla_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_macd_cmf := 'SELL'

if array.includes(WONDERLA.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(WONDERLA)
    if RES == ACTION.BUY and wonderla_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and wonderla_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for WONDERLA", alert.freq_once_per_bar_close)
        wonderla_last_signal_bb_dmi_macd := 'SELL'





NUVAMA = close_high_low_price_of_stock("NUVAMA")
NUVAMA.strategies := array.new<STRATEGY>()
NUVAMA.strategies.push(STRATEGY.DMI_STOCHASTIC)
NUVAMA.strategies.push(STRATEGY.MACD_CMF)
NUVAMA.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for NUVAMA
var nuvama_last_signal_dmi_stochastic = "NONE"
var nuvama_last_signal_ema_cci = "NONE"
var nuvama_last_signal_macd_cmf = "NONE"
var nuvama_last_signal_bb_dmi_macd = "NONE"

if array.includes(NUVAMA.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(NUVAMA)
    if RES == ACTION.BUY and nuvama_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and nuvama_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_dmi_stochastic := 'SELL'

if array.includes(NUVAMA.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(NUVAMA)
    if RES == ACTION.BUY and nuvama_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and nuvama_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_ema_cci := 'SELL'

if array.includes(NUVAMA.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(NUVAMA)
    if RES == ACTION.BUY and nuvama_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and nuvama_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_macd_cmf := 'SELL'

if array.includes(NUVAMA.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(NUVAMA)
    if RES == ACTION.BUY and nuvama_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and nuvama_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for NUVAMA", alert.freq_once_per_bar_close)
        nuvama_last_signal_bb_dmi_macd := 'SELL'




GRWRHITECH = close_high_low_price_of_stock("GRWRHITECH")
GRWRHITECH.strategies := array.new<STRATEGY>()
GRWRHITECH.strategies.push(STRATEGY.DMI_STOCHASTIC)
GRWRHITECH.strategies.push(STRATEGY.EMA_CCI)
GRWRHITECH.strategies.push(STRATEGY.MACD_CMF)
GRWRHITECH.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for GRWRHITECH
var grwrhitech_last_signal_dmi_stochastic = "NONE"
var grwrhitech_last_signal_ema_cci = "NONE"
var grwrhitech_last_signal_macd_cmf = "NONE"
var grwrhitech_last_signal_bb_dmi_macd = "NONE"

if array.includes(GRWRHITECH.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(GRWRHITECH)
    if RES == ACTION.BUY and grwrhitech_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and grwrhitech_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_dmi_stochastic := 'SELL'

if array.includes(GRWRHITECH.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(GRWRHITECH)
    if RES == ACTION.BUY and grwrhitech_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and grwrhitech_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_ema_cci := 'SELL'

if array.includes(GRWRHITECH.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(GRWRHITECH)
    if RES == ACTION.BUY and grwrhitech_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and grwrhitech_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_macd_cmf := 'SELL'

if array.includes(GRWRHITECH.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(GRWRHITECH)
    if RES == ACTION.BUY and grwrhitech_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and grwrhitech_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for GRWRHITECH", alert.freq_once_per_bar_close)
        grwrhitech_last_signal_bb_dmi_macd := 'SELL'




NETWEB = close_high_low_price_of_stock("NETWEB")
NETWEB.strategies := array.new<STRATEGY>()
NETWEB.strategies.push(STRATEGY.DMI_STOCHASTIC)
NETWEB.strategies.push(STRATEGY.EMA_CCI)
NETWEB.strategies.push(STRATEGY.BB_DMI_MACD)
// Optimized Strategy Execution for NETWEB
var netweb_last_signal_dmi_stochastic = "NONE"
var netweb_last_signal_ema_cci = "NONE"
var netweb_last_signal_macd_cmf = "NONE"
var netweb_last_signal_bb_dmi_macd = "NONE"

if array.includes(NETWEB.strategies, STRATEGY.DMI_STOCHASTIC)
    ACTION RES = DMI_STOCHASTIC(NETWEB)
    if RES == ACTION.BUY and netweb_last_signal_dmi_stochastic != 'BUY'
        alert("⚠️ Buy signal based on DMI_STOCHASTIC for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_dmi_stochastic := 'BUY'
    if RES == ACTION.SELL and netweb_last_signal_dmi_stochastic == 'BUY'
        alert("⚠️ Sell signal based on DMI_STOCHASTIC for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_dmi_stochastic := 'SELL'

if array.includes(NETWEB.strategies, STRATEGY.EMA_CCI)
    ACTION RES = EMI_CCI_STRATEGY(NETWEB)
    if RES == ACTION.BUY and netweb_last_signal_ema_cci != 'BUY'
        alert("⚠️ Buy signal based on EMA_CCI for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_ema_cci := 'BUY'
    if RES == ACTION.SELL and netweb_last_signal_ema_cci == 'BUY'
        alert("⚠️ Sell signal based on EMA_CCI for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_ema_cci := 'SELL'

if array.includes(NETWEB.strategies, STRATEGY.MACD_CMF)
    ACTION RES = MACD_CMF_STRATEGY(NETWEB)
    if RES == ACTION.BUY and netweb_last_signal_macd_cmf != 'BUY'
        alert("⚠️ Buy signal based on MACD_CMF for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_macd_cmf := 'BUY'
    if RES == ACTION.SELL and netweb_last_signal_macd_cmf == 'BUY'
        alert("⚠️ Sell signal based on MACD_CMF for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_macd_cmf := 'SELL'

if array.includes(NETWEB.strategies, STRATEGY.BB_DMI_MACD)
    ACTION RES = BB_DMI_MACD_STRATEGY(NETWEB)
    if RES == ACTION.BUY and netweb_last_signal_bb_dmi_macd != 'BUY'
        alert("⚠️ Buy signal based on BB_DMI_MACD for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_bb_dmi_macd := 'BUY'
    if RES == ACTION.SELL and netweb_last_signal_bb_dmi_macd == 'BUY'
        alert("⚠️ Sell signal based on BB_DMI_MACD for NETWEB", alert.freq_once_per_bar_close)
        netweb_last_signal_bb_dmi_macd := 'SELL'




plot(BASF.highPrice)
plot(ADANIGREEN.lowPrice)
plot(2)

